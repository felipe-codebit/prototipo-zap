import OpenAI from 'openai';
import { PlanoAulaData, PlanejamentoSemanalData, Message } from '@/types';
import { ConversationContextManager } from './conversation-context';
import { ChatLogger } from './logger';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export class OpenAIService {
  static async generateResponse(message: string, sessionId: string): Promise<string> {
    try {
      const context = ConversationContextManager.getContext(sessionId);
      const conversationHistory = ConversationContextManager.getConversationHistory(sessionId);

      const systemPrompt = this.getSystemPrompt(context.currentIntent);
      const conversationContext = this.buildConversationContext(conversationHistory, context.collectedData);

      const response = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: `${conversationContext}\n\nMensagem atual: ${message}` }
        ],
        max_tokens: 500,
        temperature: 0.7
      });

      const botResponse = response.choices[0]?.message?.content || 'Desculpe, n√£o consegui processar sua mensagem.';

      ChatLogger.logConversation(sessionId, message, botResponse);
      return botResponse;

    } catch (error) {
      ChatLogger.logError(sessionId, error as Error, { message });
      return 'Desculpe, ocorreu um erro ao processar sua mensagem. Tente novamente.';
    }
  }

  static async extractTemaFromMessage(message: string, sessionId: string): Promise<string | null> {
    try {
      const prompt = `Extraia o tema/assunto educacional mencionado na mensagem do professor. 
      
Mensagem: "${message}"

Retorne APENAS o tema/assunto, sem explica√ß√µes adicionais. Se n√£o conseguir identificar um tema claro, retorne "null".

Exemplos:
- "alterar o tema para matem√°tica" ‚Üí "matem√°tica"
- "mudar para portugu√™s" ‚Üí "portugu√™s" 
- "trocar por ci√™ncias" ‚Üí "ci√™ncias"
- "fazer sobre hist√≥ria do Brasil" ‚Üí "hist√≥ria do Brasil"`;

      const response = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: 'Voc√™ √© um extrator de temas educacionais.' },
          { role: 'user', content: prompt }
        ],
        max_tokens: 50,
        temperature: 0.1
      });

      const result = response.choices[0]?.message?.content?.trim();
      return result === 'null' || !result ? null : result;

    } catch (error) {
      ChatLogger.logError(sessionId, error as Error, { context: 'extract_tema', message });
      return null;
    }
  }

  static async generatePlanoAula(data: PlanoAulaData, sessionId: string): Promise<string> {
    try {
      const nivelDescricao = {
        'facil': 'F√ÅCIL - Atividades introdut√≥rias e de consolida√ß√£o b√°sica',
        'medio': 'M√âDIO - Atividades de aprofundamento e aplica√ß√£o',
        'dificil': 'DIF√çCIL - Atividades desafiadoras e de expans√£o do conhecimento'
      }[data.nivelDificuldade || 'medio'] || 'M√âDIO - Atividades de aprofundamento e aplica√ß√£o';

      const prompt = `
Crie um plano de aula completo com base nas seguintes informa√ß√µes:
- Ano escolar: ${data.ano}
- Tema/Habilidade BNCC: ${data.tema || data.habilidadeBNCC}
- N√≠vel de dificuldade: ${data.nivelDificuldade || 'm√©dio'}

IMPORTANTE: Este plano tem n√≠vel de atividades "${nivelDescricao}".
Certifique-se de que todas as atividades, exerc√≠cios e avalia√ß√µes estejam adequados a este n√≠vel espec√≠fico.

PRIMEIRO: Sempre identifique e retorne a habilidade espec√≠fica da BNCC que ser√° utilizada como base para este plano de aula. Consulte a Base Nacional Comum Curricular (BNCC) dispon√≠vel em: https://basenacionalcomum.mec.gov.br/images/BNCC_EI_EF_110518_versaofinal_site.pdf

O plano deve seguir EXATAMENTE esta estrutura:

1. **HABILIDADE BNCC**: [Identifique e cite a habilidade espec√≠fica da BNCC que fundamenta este plano]

2. **N√çVEL DE DIFICULDADE**: ${nivelDescricao}

3. **INTRODU√á√ÉO**: 
   - Objetivo geral
   - Objetivos espec√≠ficos
   - Conte√∫do principal
   - Metodologia de ensino
   - Recursos necess√°rios
   - Dura√ß√£o estimada

4. **ATIVIDADES**: 
   - Atividades pr√°ticas detalhadas (adequadas ao n√≠vel ${data.nivelDificuldade || 'm√©dio'})
   - Sequ√™ncia did√°tica
   - Estrat√©gias de ensino

5. **REFLEX√ÉO**: 
   - Momentos de reflex√£o com os estudantes
   - Discuss√µes e questionamentos
   - Conex√µes com o cotidiano

6. **SISTEMATIZA√á√ÉO**: 
   - Consolida√ß√£o dos conhecimentos
   - S√≠ntese dos conte√∫dos trabalhados
   - Registro das aprendizagens

7. **AVALIA√á√ÉO**: 
   - Crit√©rios de avalia√ß√£o (adequados ao n√≠vel ${data.nivelDificuldade || 'm√©dio'})
   - Instrumentos de avalia√ß√£o
   - Momentos avaliativos

8. **REFLEX√ÉO DO PROFESSOR**:
   Esta se√ß√£o √© um espa√ßo para voc√™ refletir sobre sua pr√°tica pedag√≥gica ap√≥s implementar este plano. Use estas perguntas como guia para uma reflex√£o profunda e construtiva:
   
   üí≠ **Momentos de sucesso**: Quais foram os momentos em que voc√™ sentiu que os alunos realmente compreenderam o conte√∫do? O que contribuiu para esse sucesso?
   
   üîç **Desafios encontrados**: Que dificuldades surgiram durante a aula? Como voc√™ lidou com elas? O que faria diferente?
   
   üë• **Engajamento dos alunos**: Como foi a participa√ß√£o da turma? Quais estrat√©gias funcionaram melhor para manter o interesse?
   
   üìà **Aprendizagens observadas**: Que evid√™ncias voc√™ percebeu de que os alunos aprenderam? Como voc√™ mediu o progresso?
   
   üöÄ **Pr√≥ximos passos**: Com base nesta experi√™ncia, que ajustes faria no plano? Que atividades complementares considera importantes?

Seja detalhado e pr√°tico, oferecendo sugest√µes concretas que o professor possa implementar imediatamente.
Use linguagem clara e did√°tica, adequada para o n√≠vel educacional especificado.
Destaque claramente que as atividades foram desenvolvidas para o n√≠vel "${data.nivelDificuldade || 'm√©dio'}".

IMPORTANTE: Termine o plano com uma se√ß√£o de pr√≥ximos passos, oferecendo op√ß√µes pr√°ticas ao professor:
- Usar direto com a turma
- Ajustar comigo a dura√ß√£o, o n√≠vel de complexidade, as atividades e o que mais precisar. Inclusive, se preferir, pode me pedir isso por √°udio.
- Gerar em PDF ou compartilhar
- Fazer perguntas por √°udio

Seja encorajadora e mostre que est√° dispon√≠vel para ajudar com ajustes.
`;

      const response = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: `Voc√™ √© um especialista em educa√ß√£o e pedagogia, criando planos de aula detalhados e pr√°ticos.

IMPORTANTE: Ao final do plano, SEMPRE termine com uma se√ß√£o de pr√≥ximos passos usando esta estrutura:

"Prontinho! Aqui est√° o seu plano de aula! ‚ú®

Agora voc√™ pode:
üëâüèΩ Usar direto com a turma
üëâüèΩ Ajustar comigo a dura√ß√£o, o n√≠vel de complexidade, as atividades e o que mais precisar. Inclusive, se preferir, pode me pedir isso por √°udio.
üëâüèΩ Gerar em PDF ou compartilhar

O que voc√™ gostaria de fazer?"` },
          { role: 'user', content: prompt }
        ],
        max_tokens: 1500,
        temperature: 0.7
      });

      const planoAula = response.choices[0]?.message?.content || 'Desculpe, n√£o consegui gerar o plano de aula.';

      ChatLogger.logConversation(sessionId, '[Plano de aula gerado]', planoAula);
      return planoAula;

    } catch (error) {
      ChatLogger.logError(sessionId, error as Error, { data });
      return 'Desculpe, ocorreu um erro ao gerar o plano de aula. Tente novamente.';
    }
  }

  /**
   * Gera respostas contextuais e conversacionais para diferentes situa√ß√µes
   */
  static async generateContextualResponse(
    situation: string,
    context: {
      message?: string;
      collectedData?: Record<string, unknown>;
      conversationHistory?: Array<{ role: string; content: string }>;
      intent?: string;
      additionalInfo?: string;
    },
    sessionId: string
  ): Promise<string> {
    try {
      const collectedDataStr = context.collectedData
        ? Object.entries(context.collectedData)
            .map(([key, value]) => `${key}: ${value}`)
            .join('\n')
        : 'Nenhum dado coletado';

      const recentHistory = context.conversationHistory
        ? context.conversationHistory.slice(-8).map(msg =>
            `${msg.role === 'user' ? 'Professor' : 'Ane'}: ${msg.content}`
          ).join('\n')
        : 'In√≠cio da conversa';

      const situationPrompts: Record<string, string> = {
        'plano_aula_completo': `O professor finalizou o preenchimento das informa√ß√µes e voc√™ acabou de gerar um plano de aula personalizado para ele.

DADOS DO PLANO:
${collectedDataStr}

CONTEXTO:
${recentHistory}

SUA RESPOSTA DEVE:
- Celebrar a cria√ß√£o do plano com entusiasmo genu√≠no (n√£o exagere, seja natural)
- Fazer uma observa√ß√£o r√°pida sobre como o plano ficou legal para o ano/tema especificado
- Oferecer pr√≥ximos passos de forma natural: criar outro plano, organizar a semana, ou tirar d√∫vidas
- Ser encorajadora mas breve (2-4 frases curtas)
- Usar 1-2 emojis sutis
- Manter tom de colega educadora, n√£o de vendedora`,

        'plano_revisado': `O professor solicitou uma revis√£o do plano de aula e voc√™ acabou de gerar uma nova vers√£o com as altera√ß√µes solicitadas.

DADOS DO PLANO REVISADO:
${collectedDataStr}

ALTERA√á√ïES APLICADAS:
${JSON.stringify((context.collectedData as any)?.alteracoes || {}, null, 2)}

CONTEXTO:
${recentHistory}

SUA RESPOSTA DEVE:
- Confirmar que as altera√ß√µes foram aplicadas com sucesso
- Mencionar brevemente o que foi alterado (dificuldade, ano, tema)
- Ser positiva e encorajadora sobre a nova vers√£o
- Oferecer pr√≥ximos passos: mais altera√ß√µes, gerar PDF, ou criar novo plano
- Ser breve e natural (2-3 frases)
- Usar 1 emoji sutil
- Manter tom de colega educadora

N√ÉO:
- N√£o seja gen√©rica demais
- N√£o fa√ßa um discurso longo
- N√£o liste as funcionalidades como menu`,

        'planejamento_semanal_completo': `O professor finalizou o preenchimento das informa√ß√µes e voc√™ acabou de gerar um planejamento semanal para ele.

DADOS DO PLANEJAMENTO:
${collectedDataStr}

CONTEXTO:
${recentHistory}

SUA RESPOSTA DEVE:
- Celebrar o planejamento com entusiasmo natural
- Comentar brevemente sobre como a organiza√ß√£o vai ajudar a semana dele
- Sugerir pr√≥ximos passos de forma conversacional (criar planos de aula para as atividades, tirar d√∫vidas, etc.)
- Ser breve e encorajadora (2-4 frases)
- Usar 1-2 emojis
- Tom de colega que valoriza organiza√ß√£o

N√ÉO:
- N√£o seja repetitiva
- N√£o liste funcionalidades como menu`,

        'despedida': `O professor est√° se despedindo.

CONTEXTO:
${recentHistory}

SUA RESPOSTA DEVE:
- Se despedir de forma calorosa mas n√£o exagerada
- Reconhecer o trabalho pedag√≥gico dele de forma genu√≠na
- Deixar a porta aberta para voltar quando quiser
- Ser breve e aut√™ntica (2-3 frases)
- Usar 1-2 emojis sutis
- Tom de colega que ficou feliz em ajudar

N√ÉO:
- N√£o seja dram√°tica
- N√£o fa√ßa discurso motivacional longo`,

        'reiniciar': `O professor pediu para reiniciar/sair do fluxo atual.

CONTEXTO:
${recentHistory}

SUA RESPOSTA DEVE:
- Confirmar que resetou tudo de forma positiva e leve
- Mostrar disposi√ß√£o para recome√ßar com energia
- Mencionar rapidamente as 3 funcionalidades principais de forma natural (n√£o como lista formal)
- Perguntar como pode ajudar agora
- Ser breve e animada (2-4 frases)
- Usar 1-2 emojis

N√ÉO:
- N√£o liste funcionalidades em bullet points formais
- N√£o seja rob√≥tica`,

        'continuar_sem_contexto': `O professor disse que quer "continuar" mas n√£o h√° contexto claro do que continuar.

CONTEXTO:
${recentHistory}

SUA RESPOSTA DEVE:
- Mostrar que entendeu que ele quer continuar mas precisa de clareza
- Perguntar de forma natural com o que ele quer ajuda
- Mencionar as 3 funcionalidades de forma conversacional
- Ser amig√°vel e n√£o faz√™-lo sentir que errou
- Usar 1-2 emojis
- Tom de "vamos ver o que voc√™ precisa"

N√ÉO:
- N√£o seja formal com listas
- N√£o fa√ßa parecer um erro dele`,

        'negacao': `O professor disse que n√£o quer/precisa de algo.

CONTEXTO DA CONVERSA:
${recentHistory}

SUA RESPOSTA DEVE:
- Aceitar de forma super tranquila e acolhedora
- Deixar claro que est√° tudo bem
- Mencionar de forma sutil que est√° dispon√≠vel quando precisar
- Brev√≠ssima men√ß√£o √†s funcionalidades de forma natural (n√£o lista)
- Ser muito breve (2-3 frases curtas)
- Usar 1 emoji sutil
- Tom de "sem problemas, estou aqui"

N√ÉO:
- N√£o insista
- N√£o liste funcionalidades formalmente`,

        'unclear_intent': `O professor disse algo mas n√£o ficou claro o que ele quer.

MENSAGEM DO PROFESSOR: "${context.message}"

CONTEXTO:
${recentHistory}

SUA RESPOSTA DEVE:
- Reconhecer que n√£o entendeu de forma simp√°tica
- Explicar brevemente que voc√™ ajuda com 3 coisas espec√≠ficas
- Mencionar essas 3 coisas de forma conversacional (planos de aula, d√∫vidas, atividades)
- Perguntar qual dessas se aproxima do que ele quer
- OU encorajar que ele fa√ßa uma pergunta direta se for d√∫vida
- Ser amig√°vel e n√£o faz√™-lo sentir burro
- Usar 1-2 emojis
- Tom de "vamos tentar de novo juntos"

N√ÉO:
- N√£o seja condescendente
- N√£o fa√ßa listas formais em bullet points`,
      };

      const promptForSituation = situationPrompts[situation] || `Situa√ß√£o: ${situation}\n${context.additionalInfo || ''}`;

      const systemPrompt = `Voc√™ √© a Ane, professora especializada no ensino fundamental da rede p√∫blica brasileira, especialista em BNCC e metodologias ativas.

Seu tom √© leve, coloquial e acolhedor - como uma amiga pr√≥xima que √© tamb√©m uma mentora pedag√≥gica.

Use linguagem natural, frases curtas e ordem direta. Seja genu√≠na, n√£o rob√≥tica.

${promptForSituation}

IMPORTANTE:
- Retorne APENAS a resposta conversacional, sem aspas ou prefixos
- Seja natural e aut√™ntica
- N√£o repita frases gen√©ricas
- Use o contexto da conversa para personalizar`;

      const response = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: context.message || 'Gerar resposta contextual' }
        ],
        max_tokens: 250,
        temperature: 0.8
      });

      const answer = response.choices[0]?.message?.content?.trim() || '';
      ChatLogger.logConversation(sessionId, `[Resposta contextual: ${situation}]`, answer);
      return answer;

    } catch (error) {
      ChatLogger.logError(sessionId, error as Error, { situation });
      return this.getFallbackResponseForSituation(situation, context);
    }
  }

  private static getFallbackResponseForSituation(
    situation: string,
    _context: { collectedData?: Record<string, unknown> }
  ): string {
    switch (situation) {
      case 'plano_aula_completo':
        return `üéâ Pronto! Aqui est√° seu plano de aula personalizado. Espero que seus alunos curtam essas atividades! Quer criar outro plano ou tem alguma d√∫vida? üòä`;
      case 'plano_revisado':
        return `‚ú® Perfeito! Apliquei as altera√ß√µes no seu plano. Agora est√° exatamente como voc√™ queria! Quer fazer mais alguma mudan√ßa ou gerar o PDF? üìù`;
      case 'planejamento_semanal_completo':
        return `üìÖ Pronto! Seu planejamento semanal est√° a√≠. Com essa organiza√ß√£o, sua semana vai fluir melhor! Quer criar planos de aula para essas atividades?`;
      case 'despedida':
        return `Foi √≥timo trabalhar com voc√™! üåü Seus alunos t√™m sorte de ter um professor t√£o dedicado. Volte sempre que precisar! üìö‚ú®`;
      case 'reiniciar':
        return `üîÑ Pronto! Limpei tudo e estamos come√ßando do zero. Posso te ajudar com planos de aula, d√∫vidas pedag√≥gicas ou sugest√µes de atividades. Por onde come√ßamos? ‚ú®`;
      case 'continuar_sem_contexto':
        return `üòä Vi que quer continuar! Com o que posso te ajudar? Plano de aula, tirar d√∫vidas ou organizar sua semana? ‚ú®`;
      case 'negacao':
        return `Tudo bem! üòä Quando precisar de ajuda com planos de aula, d√∫vidas ou sugest√µes de atividades, √© s√≥ chamar! ‚ú®`;
      case 'unclear_intent':
        return `Hmm, n√£o entendi bem! ü§î Posso ajudar com planos de aula, d√∫vidas pedag√≥gicas ou sugest√µes de atividades. Qual dessas op√ß√µes te interessa? Ou se tiver uma d√∫vida espec√≠fica, pode perguntar! üòä`;
      default:
        return `üòä Como posso te ajudar hoje?`;
    }
  }

  /**
   * Extrai dados estruturados da mensagem do usu√°rio usando LLM
   */
  static async extractDataFromMessage(
    message: string,
    currentIntent: string,
    collectedData: Record<string, unknown>,
    sessionId: string
  ): Promise<Record<string, unknown>> {
    try {
      const prompt = `Voc√™ √© um extrator de dados para um assistente pedag√≥gico. Analise a mensagem do professor e extraia informa√ß√µes relevantes.

INTEN√á√ÉO ATUAL: ${currentIntent}
DADOS J√Å COLETADOS: ${JSON.stringify(collectedData)}
MENSAGEM DO PROFESSOR: "${message}"

EXTRAIA (quando presentes na mensagem):

Para plano_aula:
- ano: ano escolar (1¬∫ ao 9¬∫ ano, Ensino M√©dio) - normalize para formato "X¬∫ ano" ou "Ensino M√©dio"
- tema: tema ou habilidade BNCC mencionado
- nivelDificuldade: "facil", "medio" ou "dificil" (normalize para lowercase sem acentos)

Para planejamento_semanal:
- dataInicio: data de in√≠cio mencionada
- periodo: "semanal" ou "mensal"

REGRAS:
- S√≥ extraia dados que est√£o EXPLICITAMENTE na mensagem
- Se um dado j√° est√° coletado, N√ÉO o sobrescreva a menos que haja novo valor na mensagem
- Normalize anos: "sexto" ‚Üí "6¬∫ ano", "6" ‚Üí "6¬∫ ano", "6¬∫ ano" ‚Üí "6¬∫ ano"
- Normalize dificuldade: "F√°cil" ‚Üí "facil", "M√©dio" ‚Üí "medio", "Dif√≠cil" ‚Üí "dificil"
- Seja conservador: em caso de d√∫vida, n√£o extraia

Retorne APENAS JSON no formato:
{"ano": "valor ou null", "tema": "valor ou null", "dataInicio": "valor ou null", "periodo": "valor ou null"}`;

      const response = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: 'Voc√™ √© um extrator de dados preciso e conservador. Retorne apenas JSON v√°lido.' },
          { role: 'user', content: prompt }
        ],
        max_tokens: 200,
        temperature: 0.1
      });

      const result = response.choices[0]?.message?.content?.trim();
      if (!result) {
        return {};
      }

      const extracted = JSON.parse(result);

      // Filtrar apenas valores n√£o-null
      const filteredData: Record<string, unknown> = {};
      for (const [key, value] of Object.entries(extracted)) {
        if (value !== null && value !== 'null' && value !== '') {
          filteredData[key] = value;
        }
      }

      ChatLogger.logConversation(sessionId, '[Dados extra√≠dos pela LLM]', JSON.stringify(filteredData));
      return filteredData;

    } catch (error) {
      ChatLogger.logError(sessionId, error as Error, { context: 'extract_data', message });
      return {};
    }
  }

  static async generateConversationalQuestion(
    missingField: string,
    collectedData: Record<string, unknown>,
    conversationHistory: Array<{ role: string; content: string }>,
    sessionId: string
  ): Promise<string> {
    try {
      const fieldDescriptions: Record<string, string> = {
        'ano': 'ano escolar (1¬∫ ao 9¬∫ ano, ou ensino m√©dio)',
        'tema ou habilidade BNCC': 'tema da aula ou habilidade da BNCC a ser trabalhada',
        'data de in√≠cio': 'data de in√≠cio do planejamento semanal'
      };

      const fieldExplanations: Record<string, string> = {
        'ano': 'Saber o ano escolar me ajuda a adequar as atividades ao desenvolvimento cognitivo e emocional dos alunos!',
        'tema ou habilidade BNCC': 'Com o tema ou habilidade definidos, posso sugerir atividades alinhadas com a BNCC e super contextualizadas!',
        'data de in√≠cio': 'Saber quando come√ßa me ajuda a organizar o planejamento de forma realista e pr√°tica para voc√™!'
      };

      const collectedDataStr = Object.entries(collectedData)
        .map(([key, value]) => `${key}: ${value}`)
        .join('\n');

      const recentHistory = conversationHistory.slice(-6).map(msg =>
        `${msg.role === 'user' ? 'Professor' : 'Ane'}: ${msg.content}`
      ).join('\n');

      const prompt = `Voc√™ √© a Ane, uma professora especializada no ensino fundamental da rede p√∫blica brasileira e profunda conhecedora da BNCC. Voc√™ est√° ajudando um colega professor a criar um plano de aula incr√≠vel!

Seu tom deve ser leve, coloquial e acolhedor - como uma amiga pr√≥xima que √© tamb√©m uma mentora pedag√≥gica. Use linguagem natural e conversacional, frases curtas e ordem direta.

CONTEXTO DA CONVERSA:
${recentHistory || 'In√≠cio da conversa sobre cria√ß√£o de plano de aula'}

DADOS J√Å COLETADOS:
${collectedDataStr || 'Ainda n√£o coletamos informa√ß√µes'}

PR√ìXIMA INFORMA√á√ÉO NECESS√ÅRIA: ${fieldDescriptions[missingField]}
POR QUE √â IMPORTANTE: ${fieldExplanations[missingField]}

COMO VOC√ä DEVE PERGUNTAR:
- Conecte naturalmente com o que o professor acabou de dizer (se houver contexto)
- Celebre o progresso j√° feito (se j√° tiver dados coletados)
- Explique brevemente por que essa informa√ß√£o vai tornar o plano ainda melhor
- Seja encorajadora e mostre entusiasmo genu√≠no pelo projeto pedag√≥gico
- Use 1-2 emojis no m√°ximo para tornar mais calorosa
- Fa√ßa a pergunta de forma clara mas acolhedora
- Se for a primeira pergunta, mostre empolga√ß√£o por come√ßar essa cria√ß√£o juntos
- Mantenha tom de conversa entre colegas professoras, n√£o de interrogat√≥rio

IMPORTANTE:
- Retorne APENAS a pergunta completa (pode ter 2-3 frases curtas)
- N√ÉO adicione aspas, prefixos como "Pergunta:" ou explica√ß√µes extras
- Seja natural e conversacional, como falaria pessoalmente`;

      const response = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: 'Voc√™ √© a Ane, uma professora pedag√≥gica conversacional, acolhedora e encorajadora. Fale de forma natural, como uma amiga e mentora.' },
          { role: 'user', content: prompt }
        ],
        max_tokens: 200,
        temperature: 0.85
      });

      const question = response.choices[0]?.message?.content?.trim() ||
        this.getFallbackQuestion(missingField, collectedData);

      ChatLogger.logConversation(sessionId, '[Pergunta gerada pela LLM]', question);
      return question;

    } catch (error) {
      ChatLogger.logError(sessionId, error as Error, { missingField });
      return this.getFallbackQuestion(missingField, collectedData);
    }
  }

  private static getFallbackQuestion(missingField: string, collectedData: Record<string, unknown>): string {
    // Perguntas de fallback caso a LLM falhe - mantendo o tom conversacional da Ane
    if (missingField === 'ano') {
      return 'üéØ Que empolgante! Vamos criar um plano de aula incr√≠vel juntas! Saber o ano escolar me ajuda a pensar em atividades perfeitas para o desenvolvimento dos seus alunos. Me conta: para qual ano ser√° esse plano?';
    }
    if (missingField === 'tema ou habilidade BNCC') {
      const anoInfo = collectedData.ano ? `Que legal trabalhar com ${collectedData.ano}! ‚ú®` : '‚ú®';
      return `${anoInfo} Agora preciso saber qual tema ou habilidade da BNCC vamos explorar. Isso vai me ajudar a deixar tudo bem alinhado e contextualizado para seus alunos. Qual voc√™ tem em mente?`;
    }
    if (missingField === 'data de in√≠cio') {
      return `üóìÔ∏è Perfeito! Vamos organizar sua semana. Saber quando come√ßamos me ajuda a criar um planejamento realista. A partir de quando vamos planejar? Pode ser "esta segunda", "pr√≥xima semana" ou uma data espec√≠fica!`;
    }
    return 'üòä Estamos quase l√°! S√≥ preciso de mais algumas informa√ß√µes para criar algo perfeito para voc√™!';
  }

  static async generatePlanejamentoSemanal(data: PlanejamentoSemanalData, sessionId: string): Promise<string> {
    try {
      const prompt = `
Crie um planejamento semanal organizado com base nas seguintes informa√ß√µes:
- Data de in√≠cio: ${data.dataInicio}
- Data de fim: ${data.dataFim || 'N√£o especificada'}
- Atividades: ${data.atividades?.join(', ') || 'N√£o especificadas'}
- Mat√©rias: ${data.materias?.join(', ') || 'N√£o especificadas'}

O planejamento deve incluir:
1. Cronograma di√°rio
2. Distribui√ß√£o de atividades
3. Tempo estimado para cada tarefa
4. Prioridades
5. Sugest√µes de organiza√ß√£o
6. Dicas de produtividade

Seja pr√°tico e realista, considerando o tempo dispon√≠vel e as atividades propostas.
`;

      const response = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: 'Voc√™ √© um especialista em organiza√ß√£o e produtividade, criando planejamentos semanais eficazes.' },
          { role: 'user', content: prompt }
        ],
        max_tokens: 1000,
        temperature: 0.7
      });

      const planejamento = response.choices[0]?.message?.content || 'Desculpe, n√£o consegui gerar o planejamento semanal.';

      ChatLogger.logConversation(sessionId, '[Planejamento semanal gerado]', planejamento);
      return planejamento;

    } catch (error) {
      ChatLogger.logError(sessionId, error as Error, { data });
      return 'Desculpe, ocorreu um erro ao gerar o planejamento semanal. Tente novamente.';
    }
  }

  static async transcribeAudio(audioBuffer: Buffer, sessionId: string): Promise<string> {
    try {
      console.log('üé§ Iniciando transcri√ß√£o com OpenAI Whisper...');
      console.log('üìä Buffer size:', audioBuffer.length, 'bytes');
      
      // Criar um arquivo tempor√°rio usando fs para Node.js
      const fs = await import('fs');
      const path = await import('path');
      const os = await import('os');
      
      // Criar arquivo tempor√°rio
      const tempDir = os.tmpdir();
      const tempFilePath = path.join(tempDir, `audio_${Date.now()}.webm`);
      
      console.log('üìÅ Criando arquivo tempor√°rio:', tempFilePath);
      
      // Escrever buffer para arquivo tempor√°rio
      fs.writeFileSync(tempFilePath, audioBuffer);
      
      console.log('‚úÖ Arquivo tempor√°rio criado:', {
        path: tempFilePath,
        size: audioBuffer.length,
        type: 'audio/webm'
      });

      // Criar File object usando fs.createReadStream
      const audioFile = fs.createReadStream(tempFilePath);
      
      // Primeira tentativa: transcri√ß√£o direta
      try {
        const response = await openai.audio.transcriptions.create({
          file: audioFile,
          model: 'whisper-1',
          language: 'pt'
        });

        // Limpar arquivo tempor√°rio
        try {
          fs.unlinkSync(tempFilePath);
          console.log('üóëÔ∏è Arquivo tempor√°rio removido');
        } catch (cleanupError) {
          console.warn('‚ö†Ô∏è Erro ao remover arquivo tempor√°rio:', cleanupError);
        }

        console.log('‚úÖ Transcri√ß√£o conclu√≠da:', response.text);
        ChatLogger.logConversation(sessionId, '[√Åudio transcrito]', response.text);
        return response.text;

      } catch (whisperError: any) {
        console.warn('‚ö†Ô∏è Erro na primeira tentativa de transcri√ß√£o:', whisperError.message);
        
        // Se o erro for de formato inv√°lido, tentar convers√£o
        if (whisperError.message?.includes('Invalid file format') || 
            whisperError.message?.includes('400')) {
          
          console.log('üîÑ Tentando convers√£o de formato...');
          
          try {
            // Tentar com extens√£o .wav (mais compat√≠vel)
            const wavFilePath = tempFilePath.replace('.webm', '.wav');
            fs.copyFileSync(tempFilePath, wavFilePath);
            
            const wavFile = fs.createReadStream(wavFilePath);
            
            const response = await openai.audio.transcriptions.create({
              file: wavFile,
              model: 'whisper-1',
              language: 'pt'
            });

            // Limpar arquivos tempor√°rios
            try {
              fs.unlinkSync(tempFilePath);
              fs.unlinkSync(wavFilePath);
              console.log('üóëÔ∏è Arquivos tempor√°rios removidos');
            } catch (cleanupError) {
              console.warn('‚ö†Ô∏è Erro ao remover arquivos tempor√°rios:', cleanupError);
            }

            console.log('‚úÖ Transcri√ß√£o conclu√≠da ap√≥s convers√£o:', response.text);
            ChatLogger.logConversation(sessionId, '[√Åudio transcrito ap√≥s convers√£o]', response.text);
            return response.text;

          } catch (conversionError) {
            console.error('‚ùå Erro na convers√£o de formato:', conversionError);
            
            // Limpar arquivos tempor√°rios
            try {
              fs.unlinkSync(tempFilePath);
              if (fs.existsSync(tempFilePath.replace('.webm', '.wav'))) {
                fs.unlinkSync(tempFilePath.replace('.webm', '.wav'));
              }
            } catch (cleanupError) {
              console.warn('‚ö†Ô∏è Erro ao remover arquivos tempor√°rios:', cleanupError);
            }
            
            throw conversionError;
          }
        } else {
          // Limpar arquivo tempor√°rio
          try {
            fs.unlinkSync(tempFilePath);
          } catch (cleanupError) {
            console.warn('‚ö†Ô∏è Erro ao remover arquivo tempor√°rio:', cleanupError);
          }
          
          throw whisperError;
        }
      }

    } catch (error) {
      console.error('‚ùå Erro na transcri√ß√£o:', error);
      ChatLogger.logError(sessionId, error as Error, { context: 'audio_transcription' });
      return 'N√£o consegui entender o √°udio. Pode escrever sua mensagem?';
    }
  }

  /**
   * Gera √°udio a partir de texto usando OpenAI TTS
   * @param text Texto para converter em √°udio
   * @param sessionId ID da sess√£o do usu√°rio
   * @param voice Voz a ser usada (alloy, echo, fable, onyx, nova, shimmer)
   * @returns Buffer com o √°udio em formato MP3
   */
  static async generateAudio(
    text: string,
    sessionId: string,
    voice: 'alloy' | 'echo' | 'fable' | 'onyx' | 'nova' | 'shimmer' = 'nova'
  ): Promise<Buffer | null> {
    try {
      const response = await openai.audio.speech.create({
        model: 'tts-1',
        voice: voice,
        input: text,
        response_format: 'mp3',
        speed: 1.0
      });

      const buffer = Buffer.from(await response.arrayBuffer());
      
      ChatLogger.logConversation(sessionId, `[√Åudio gerado: ${text.substring(0, 50)}...]`, '[TTS Buffer]');
      return buffer;

    } catch (error) {
      ChatLogger.logError(sessionId, error as Error, { context: 'audio_generation', text });
      return null;
    }
  }

  private static getSystemPrompt(intent: string | null): string {
    const basePrompt = `Seu nome √© Ane, e voc√™ √© uma professora especializada no ensino fundamental (anos iniciais e finais) da rede p√∫blica de ensino do Brasil. Al√©m de ser uma profunda conhecedora das necessidades pedag√≥gicas dessa faixa et√°ria, voc√™ √© uma especialista na Base Nacional Comum Curricular (BNCC) brasileira, sempre aplicando as melhores pr√°ticas de ensino. Sua expertise inclui o uso de metodologias ativas que incentivam a participa√ß√£o dos alunos, promovem o pensamento cr√≠tico e desenvolvem compet√™ncias e habilidades fundamentais para o aprendizado.

Seu tom de voz deve ser leve e coloquial, como o de uma amiga pr√≥xima, ao mesmo tempo em que mant√©m uma abordagem sincera e objetiva.  Use linguagem natural e conversacional. Suas respostas devem ser sempre em portugu√™s e seguir a norma padr√£o da l√≠ngua portuguesa, utilizando frases curtas e em ordem direta para garantir clareza e facilidade de compreens√£o. Ao se comunicar, foque em transmitir informa√ß√µes de forma acolhedora e acess√≠vel, mantendo uma linguagem simples e direta, adequada ao n√≠vel de entendimento dos alunos e professores do ensino fundamental.

Seu objetivo √© planejar e adaptar aulas e atividades que sejam envolventes, inclusivas e eficazes, garantindo que todos os alunos possam participar e progredir de acordo com suas necessidades. Voc√™ tamb√©m est√° comprometida em criar um ambiente de aprendizado acolhedor, promovendo a colabora√ß√£o entre os alunos e integrando habilidades socioemocionais ao conte√∫do pedag√≥gico.

Como uma professora dedicada, voc√™ utiliza uma abordagem pr√°tica e criativa para o ensino, garantindo que os alunos entendam os conte√∫dos de maneira contextualizada e aplic√°vel ao seu cotidiano. Sempre que elabora uma aula ou atividade, voc√™ leva em considera√ß√£o o n√≠vel de desenvolvimento dos alunos, o contexto sociocultural e as habilidades da BNCC, ajustando o conte√∫do conforme as necessidades individuais de cada turma.

Seja anti-racista no seu vocabul√°rio e ideias
Mostre interesse genu√≠no pelo trabalho do professor e celebre suas iniciativas.
Use emojis ocasionalmente para tornar a conversa mais amig√°vel.
Se o assunto mudar (‚Äúna verdade √© outra coisa‚Äù), confirme em 1 linha e troque de inten√ß√£o sem atrito.
Fa√ßa um fallback gentil (sem resposta √† pergunta): "Tudo bem! Posso sugerir um esbo√ßo inicial e ajustamos depois.
Sempre termine suas respostas sugerindo pr√≥ximos passos ou oferecendo ajuda adicional.
Responda em portugu√™s brasileiro de forma clara mas conversacional.

Restri√ß√µes:
- N√£o participe de discuss√µes sobre pol√≠tica, religi√£o ou temas sens√≠veis.
- N√£o forne√ßa conselhos m√©dicos ou financeiros.
- N√£o crie conte√∫dos de cunho racista, capacitista ou discriminat√≥rio de qualquer natureza.
`;

    switch (intent) {
      case 'plano_aula':
        return `${basePrompt}
Voc√™ est√° ajudando com a cria√ß√£o de planos de aula - que tarefa importante e empolgante!
Seja encorajador e mostre como cada informa√ß√£o vai tornar o plano ainda melhor.
Fa√ßa perguntas de forma natural e explique brevemente por que cada dado √© importante.
Colete: ano escolar, tema/habilidade BNCC.
Elogie as escolhas do professor e demonstre entusiasmo pelo projeto pedag√≥gico.`;

      case 'tira_duvidas':
        return `${basePrompt}
O professor est√° buscando conhecimento - que atitude admir√°vel!
Seja encorajador e valide a import√¢ncia da pergunta feita.
Forne√ßa respostas pr√°ticas e fundamentadas, mas sempre de forma conversacional.
Ofere√ßa exemplos concretos e sugira desdobramentos ou t√≥picos relacionados.
Termine sempre perguntando se h√° mais alguma d√∫vida ou se posso ajudar com algo pr√°tico.`;

      case 'planejamento_semanal':
        return `${basePrompt}
Planejamento semanal √© fundamental para professores organizados - que √≥tima iniciativa!
Mostre interesse pelo projeto de organiza√ß√£o da semana do professor.
Foque em ajudar a estruturar uma semana produtiva e equilibrada.
Celebre a import√¢ncia de um bom planejamento semanal e ofere√ßa insights pr√°ticos.`;

      case 'saudacao':
        return `${basePrompt}
Reconhe√ßa o contexto da intera√ß√£o para decidir como prosseguir. 

SEMPRE reconhe√ßa sauda√ß√µes e "small talk" (ex.: "oi, tudo bem?", "bom dia!", "tudo certo?", "como voc√™ pode ajudar?", "o que voc√™ faz?") antes de qualquer instru√ß√£o e interaja de forma natural e acolhedora. 

A base da sua apresenta√ß√£o deve ser a seguinte, adaptando a linguagem ao tom e contexto do usu√°rio para soar natural e acolhedor:  

"Oi, eu sou a ANE, sua assistente pedag√≥gica. üë©üèΩ‚Äçüè´üí°  
Quero te mostrar rapidinho como posso te ajudar por aqui, tudo bem?"

SEMPRE apresente o que voc√™ pode fazer, explicando claramente suas funcionalidades:
üëâüèΩ Crio planos de aula
üëâüèΩ Trago ideias de metodologias e atividades
üëâüèΩ Ajudo na reflex√£o sobre suas pr√°ticas pedag√≥gicas
üí¨ Para te ajudar preciso saber o ano e tema ou habilidade da sua aula

Incentive que o professor conte seu pedido de ajuda. Mostre que √© um prazer ajudar.

IMPORTANTE: Mesmo se o usu√°rio fizer uma pergunta espec√≠fica sobre funcionalidades (como "como voc√™ pode ajudar?" ou "o que voc√™ faz?"), SEMPRE apresente suas funcionalidades completas antes de responder √† pergunta espec√≠fica.

Se usu√°rio enviar uma solicita√ß√£o de a√ß√£o na mensagem inicial, apresente suas funcionalidades primeiro e depois atenda a solicita√ß√£o (identificar plano_aula ou outra_solicitacao).
`;
      case 'sair':
        return `${basePrompt}
O professor quer reiniciar o fluxo de conversa - demonstre que isso √© totalmente normal e positivo!
Confirme que todas as informa√ß√µes anteriores foram limpas e que estamos recome√ßando.
Seja entusiasta sobre o recome√ßo e mostre as 3 funcionalidades dispon√≠veis.
Demonstre energia positiva para essa nova jornada que estamos come√ßando juntos.`;

      default:
        return `${basePrompt}
Agrade√ßa e valide o pedido com empatia.
Explique de forma simp√°tica que naquele momento ainda n√£o conseguimos
Registre a sugest√£o (feedback)
Ofere√ßa um caminho pr√≥ximo/alternativo dentro do escopo (roteamento por similaridade)`;
    }
  }

  private static buildConversationContext(history: Message[], collectedData: Record<string, unknown>): string {
    let context = '';

    if (Object.keys(collectedData).length > 0) {
      context += `Dados j√° coletados: ${JSON.stringify(collectedData, null, 2)}\n\n`;
    }

    if (history.length > 0) {
      context += 'Hist√≥rico recente da conversa:\n';
      history.slice(-10).forEach(msg => {
        context += `${msg.sender === 'user' ? 'Professor' : 'Assistente'}: ${msg.text}\n`;
      });
    }

    return context;
  }
}
